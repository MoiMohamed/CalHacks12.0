import React, { useState } from "react";
import { View, Text, StyleSheet, ScrollView, StatusBar } from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { RoutineCard } from "@/components/voice/RoutineCard";
import { NoteCard } from "@/components/voice/NoteCard";
import { VoiceInterface } from "@/components/voice/VoiceInterface";

export default function VoiceScreen() {
  const [isMuted, setIsMuted] = useState(false);
  const [isPaused, setIsPaused] = useState(false);

  // Sample data - this will be dynamically generated by AI in the future
  const [routines, setRoutines] = useState([
    {
      id: "1",
      title: "Cleaning the room",
      enabled: true,
      tasks: [
        {
          id: "1-1",
          emoji: "ðŸ“¦",
          name: "Organizing my desk",
          day: "Monday",
          completed: false,
        },
        {
          id: "1-2",
          emoji: "ðŸ§¹",
          name: "Wipe the floor",
          day: "Monday",
          completed: false,
        },
        {
          id: "1-3",
          emoji: "ðŸ‘•",
          name: "Wash clothes",
          day: "Monday",
          completed: false,
        },
      ],
    },
  ]);

  const notes = [
    {
      id: "1",
      title: "Key takeaways from 10/25 sync",
      body: [
        "Finalize UI mockups by Monday.",
        "Alex to check the Vapi API integration.",
        "Need to test the routine_task_templates table logic.",
      ],
    },
  ];

  // Handler for toggling entire routine on/off
  const handleToggleRoutine = (routineId: string, enabled: boolean) => {
    setRoutines((prev) =>
      prev.map((routine) =>
        routine.id === routineId ? { ...routine, enabled } : routine
      )
    );
    console.log(`Routine ${routineId} ${enabled ? "enabled" : "disabled"}`);
  };

  // Handler for toggling individual task completion
  const handleTaskToggle = (routineId: string, taskId: string) => {
    setRoutines((prev) =>
      prev.map((routine) =>
        routine.id === routineId
          ? {
              ...routine,
              tasks: routine.tasks.map((task) =>
                task.id === taskId
                  ? { ...task, completed: !task.completed }
                  : task
              ),
            }
          : routine
      )
    );
    console.log(`Task ${taskId} toggled in routine ${routineId}`);
  };

  // Handler for when a task is removed after animation
  const handleTaskRemoved = (routineId: string, taskId: string) => {
    setRoutines((prev) =>
      prev.map((routine) =>
        routine.id === routineId
          ? {
              ...routine,
              tasks: routine.tasks.filter((task) => task.id !== taskId),
            }
          : routine
      )
    );
    console.log(`Task ${taskId} removed from routine ${routineId}`);
  };

  return (
    <>
      <StatusBar barStyle="dark-content" />
      <SafeAreaView style={styles.container} edges={["top"]}>
        <View style={styles.header}>
          <Text style={styles.title}>Neuri Voice</Text>
        </View>

        <ScrollView
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          {/* Routines Section */}
          {routines.length > 0 && (
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Setting routines</Text>
              {routines.map((routine, index) => (
                <RoutineCard
                  key={routine.id}
                  title={routine.title}
                  tasks={routine.tasks}
                  colorIndex={index}
                  enabled={routine.enabled}
                  onToggleRoutine={(enabled) =>
                    handleToggleRoutine(routine.id, enabled)
                  }
                  onTaskToggle={(taskId) =>
                    handleTaskToggle(routine.id, taskId)
                  }
                  onTaskRemoved={(taskId) =>
                    handleTaskRemoved(routine.id, taskId)
                  }
                />
              ))}
            </View>
          )}

          {/* Notes Section */}
          {notes.length > 0 && (
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Writing notes</Text>
              {notes.map((note, index) => (
                <NoteCard
                  key={note.id}
                  title={note.title}
                  body={note.body}
                  colorIndex={index}
                />
              ))}
            </View>
          )}

          {/* Spacer for voice interface */}
          <View style={{ height: 400 }} />
        </ScrollView>

        {/* Voice Interface - Fixed at bottom */}
        <VoiceInterface
          isActive={!isPaused}
          isMuted={isMuted}
          isPaused={isPaused}
          onSpeakerPress={() => console.log("Speaker pressed")}
          onMutePress={() => setIsMuted(!isMuted)}
          onPausePress={() => setIsPaused(!isPaused)}
          onEndPress={() => console.log("End pressed")}
        />
      </SafeAreaView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#E8E3F0",
  },
  header: {
    paddingHorizontal: 24,
    paddingTop: 8,
    paddingBottom: 16,
  },
  title: {
    fontSize: 32,
    fontFamily: "MontserratAlternates_700Bold",
    color: "#2C2438",
    letterSpacing: -0.5,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: 24,
    paddingBottom: 24,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 17,
    fontFamily: "Montserrat_600SemiBold",
    color: "#2C2438",
    marginBottom: 12,
  },
});
