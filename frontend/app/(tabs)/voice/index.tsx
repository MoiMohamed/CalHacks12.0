import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  StatusBar,
  Dimensions,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { useRouter } from "expo-router";
import { RoutineCard } from "@/components/voice/RoutineCard";
import { NoteCard } from "@/components/voice/NoteCard";
import { TaskCard } from "@/components/voice/TaskCard";
import { ReminderCard } from "@/components/voice/ReminderCard";
import { VoiceInterface } from "@/components/voice/VoiceInterface";

const { height } = Dimensions.get("window");

export default function VoiceScreen() {
  const router = useRouter();
  const [isMuted, setIsMuted] = useState(false);
  const [isPaused, setIsPaused] = useState(false);

  // Calculate spacer height to match VoiceInterface height
  const interfaceHeight = Math.min(Math.max(height * 0.35, 260), 300);

  // Sample data - this will be dynamically generated by AI in the future
  const [routines, setRoutines] = useState([
    {
      id: "1",
      emoji: "🏠",
      title: "Room cleaning",
      frequency: "Every Monday",
      enabled: true,
    },
    {
      id: "2",
      emoji: "🏃",
      title: "Morning workout",
      frequency: "Daily",
      enabled: true,
    },
    {
      id: "3",
      emoji: "📚",
      title: "Study session",
      frequency: "Monday, Wednesday, Friday",
      enabled: true,
    },
  ]);

  const notes = [
    {
      id: "1",
      title: "Key takeaways from 10/25 sync",
      body: [
        "Finalize UI mockups by Monday.",
        "Alex to check the Vapi API integration.",
        "Need to test the routine_task_templates table logic.",
      ],
    },
  ];

  const [tasks, setTasks] = useState([
    {
      id: "1",
      title: "Website Redesign Project",
      date: "Monday, December 30",
      enabled: false,
      subtasks: [
        { id: "1-1", name: "Create wireframes", completed: true },
        { id: "1-2", name: "Design mockups", completed: false },
        { id: "1-3", name: "Implement responsive layout", completed: false },
        { id: "1-4", name: "Add animations and transitions", completed: false },
      ],
    },
    {
      id: "2",
      title: "Finish CS110 Assignment #P1",
      date: "Monday, December 25",
      enabled: false,
    },
  ]);

  const [reminders, setReminders] = useState([
    {
      id: "1",
      title: "Squid Games",
      time: "4:00 PM",
      date: "Thursday, December 26",
      enabled: false,
    },
  ]);

  // Handler for toggling entire routine on/off
  const handleToggleRoutine = (routineId: string, enabled: boolean) => {
    setRoutines((prev) =>
      prev.map((routine) =>
        routine.id === routineId ? { ...routine, enabled } : routine
      )
    );
    console.log(`Routine ${routineId} ${enabled ? "enabled" : "disabled"}`);
  };

  return (
    <>
      <StatusBar barStyle="dark-content" />
      <SafeAreaView style={styles.container} edges={["top"]}>
        <View style={styles.header}>
          <Text style={styles.title}>Neuri Voice</Text>
        </View>

        <ScrollView
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          {/* Tasks Section */}
          {tasks.length > 0 && (
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Setting tasks</Text>
              {tasks.map((task, index) => (
                <TaskCard
                  key={task.id}
                  title={task.title}
                  date={task.date}
                  subtasks={task.subtasks}
                  colorIndex={index}
                  enabled={task.enabled}
                  onToggle={(enabled) =>
                    setTasks((prev) =>
                      prev.map((t) =>
                        t.id === task.id ? { ...t, enabled } : t
                      )
                    )
                  }
                />
              ))}
            </View>
          )}

          {/* Routines Section */}
          {routines.length > 0 && (
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Setting habits</Text>
              {routines.map((routine, index) => (
                <RoutineCard
                  key={routine.id}
                  emoji={routine.emoji}
                  title={routine.title}
                  frequency={routine.frequency}
                  colorIndex={index}
                  enabled={routine.enabled}
                  onToggleRoutine={(enabled) =>
                    handleToggleRoutine(routine.id, enabled)
                  }
                />
              ))}
            </View>
          )}

          {/* Notes Section */}
          {notes.length > 0 && (
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Writing notes</Text>
              {notes.map((note, index) => (
                <NoteCard
                  key={note.id}
                  title={note.title}
                  body={note.body}
                  colorIndex={index}
                />
              ))}
            </View>
          )}

          {/* Reminders Section */}
          {reminders.length > 0 && (
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Setting reminders</Text>
              {reminders.map((reminder, index) => (
                <ReminderCard
                  key={reminder.id}
                  title={reminder.title}
                  time={reminder.time}
                  date={reminder.date}
                  colorIndex={index}
                  enabled={reminder.enabled}
                  onToggle={(enabled) =>
                    setReminders((prev) =>
                      prev.map((r) =>
                        r.id === reminder.id ? { ...r, enabled } : r
                      )
                    )
                  }
                />
              ))}
            </View>
          )}

          {/* Spacer for voice interface */}
          <View style={{ height: interfaceHeight + 20 }} />
        </ScrollView>

        {/* Voice Interface - Fixed at bottom */}
        <VoiceInterface
          isActive={!isPaused}
          isMuted={isMuted}
          isPaused={isPaused}
          onSpeakerPress={() => console.log("Speaker pressed")}
          onMutePress={() => setIsMuted(!isMuted)}
          onPausePress={() => setIsPaused(!isPaused)}
          onEndPress={() => router.push("/(tabs)")}
        />
      </SafeAreaView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#E8E3F0",
  },
  header: {
    paddingHorizontal: 24,
    paddingTop: 8,
    paddingBottom: 16,
  },
  title: {
    fontSize: 32,
    fontFamily: "MontserratAlternates_700Bold",
    color: "#2C2438",
    letterSpacing: -0.5,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: 24,
    paddingBottom: 24,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 17,
    fontFamily: "Montserrat_600SemiBold",
    color: "#2C2438",
    marginBottom: 12,
  },
});
