from __future__ import annotations

from typing import Sequence
from uuid import UUID
from datetime import datetime

from fastapi import Depends

from app.models.neuri.model import MissionType
from app.models.neuri.schema import MissionCreate, MissionRead, MissionUpdate, MissionWithRelationsRead
from app.repositories.base import AsyncSession
from app.repositories.mission import MissionRepository
from app.repositories.reward import RewardRepository


class MissionService:
    mission_repo: MissionRepository
    reward_repo: RewardRepository

    def __init__(
        self, 
        mission_repo: MissionRepository = Depends(MissionRepository),
        reward_repo: RewardRepository = Depends(RewardRepository)
    ) -> None:
        self.mission_repo = mission_repo
        self.reward_repo = reward_repo

    async def create_mission(self, session: AsyncSession, data: MissionCreate) -> MissionRead:
        """Create a new mission"""
        mission = await self.mission_repo.create(session, data)
        
        # # Add points to user's reward
        # await self.reward_repo.add_points_for_mission(
        #     session, 
        #     data.user_id, 
        #     data.type.value,
        #     is_subtask=data.parent_project_id is not None
        # )
        
        return MissionRead.model_validate(mission)

    async def get_mission(self, session: AsyncSession, mission_id: UUID) -> MissionRead:
        """Get mission by ID"""
        mission = await self.mission_repo.get_mission_by_id(session, mission_id)
        return MissionRead.model_validate(mission)

    async def list_user_missions(self, session: AsyncSession, user_id: UUID) -> Sequence[MissionRead]:
        """List missions for a user"""
        missions = await self.mission_repo.list_by_user(session, user_id)
        return [MissionRead.model_validate(mission) for mission in missions]

    async def list_category_missions(self, session: AsyncSession, user_id: UUID, category_id: UUID) -> Sequence[MissionRead]:
        """List missions in a category"""
        missions = await self.mission_repo.list_by_category(session, user_id, category_id)
        return [MissionRead.model_validate(mission) for mission in missions]

    async def list_type_missions(self, session: AsyncSession, user_id: UUID, mission_type: MissionType) -> Sequence[MissionRead]:
        """List missions by type"""
        missions = await self.mission_repo.list_by_type(session, user_id, mission_type)
        return [MissionRead.model_validate(mission) for mission in missions]

    async def list_sub_tasks(self, session: AsyncSession, user_id: UUID, parent_project_id: UUID) -> Sequence[MissionRead]:
        """List sub-tasks of a project"""
        missions = await self.mission_repo.list_sub_tasks(session, user_id, parent_project_id)
        return [MissionRead.model_validate(mission) for mission in missions]

    async def list_routine_generated_missions(self, session: AsyncSession, user_id: UUID, routine_id: UUID) -> Sequence[MissionRead]:
        """List missions generated by a routine"""
        missions = await self.mission_repo.list_generated_by_routine(session, user_id, routine_id)
        return [MissionRead.model_validate(mission) for mission in missions]

    async def list_today_missions(self, session: AsyncSession, user_id: UUID) -> Sequence[MissionRead]:
        """Get missions due today - ADHD focus"""
        missions = await self.mission_repo.get_today_missions(session, user_id)
        return [MissionRead.model_validate(mission) for mission in missions]

    async def list_overdue_missions(self, session: AsyncSession, user_id: UUID) -> Sequence[MissionRead]:
        """Get overdue missions - ADHD urgency"""
        missions = await self.mission_repo.get_overdue_missions(session, user_id)
        return [MissionRead.model_validate(mission) for mission in missions]

    async def list_high_priority_missions(self, session: AsyncSession, user_id: UUID) -> Sequence[MissionRead]:
        """Get high priority missions - ADHD focus"""
        missions = await self.mission_repo.get_high_priority_missions(session, user_id)
        return [MissionRead.model_validate(mission) for mission in missions]

    async def list_heavy_missions(self, session: AsyncSession, user_id: UUID) -> Sequence[MissionRead]:
        """Get heavy missions that might need breaking down"""
        missions = await self.mission_repo.get_heavy_missions(session, user_id)
        return [MissionRead.model_validate(mission) for mission in missions]

    async def search_missions(self, session: AsyncSession, user_id: UUID, search_term: str) -> Sequence[MissionRead]:
        """Search missions by title - ADHD context awareness"""
        missions = await self.mission_repo.search_missions_by_title(session, user_id, search_term)
        return [MissionRead.model_validate(mission) for mission in missions]

    async def update_mission(self, session: AsyncSession, mission_id: UUID, data: MissionUpdate) -> MissionRead:
        """Update mission"""
        mission = await self.mission_repo.update_by_uuid(session, mission_id, data)
        return MissionRead.model_validate(mission)

    async def complete_mission(self, session: AsyncSession, mission_id: UUID) -> MissionRead:
        """Mark mission as complete and update rewards"""
        mission = await self.mission_repo.get_mission_by_id(session, mission_id)
        
        # Update mission
        update_data = MissionUpdate(is_complete=True)
        updated_mission = await self.mission_repo.update_by_uuid(session, mission_id, update_data)
        
        # Increment tasks done counter
        await self.reward_repo.increment_tasks_done(session, mission.user_id)
        
        return MissionRead.model_validate(updated_mission)

    async def delete_mission(self, session: AsyncSession, mission_id: UUID) -> None:
        """Delete mission"""
        await self.mission_repo.delete_by_uuid(session, mission_id)

    async def break_down_mission(self, session: AsyncSession, mission_id: UUID, subtask_titles: list[str]) -> Sequence[MissionRead]:
        """Break down a heavy mission into smaller subtasks"""
        parent_mission = await self.mission_repo.get_mission_by_id(session, mission_id)
        
        subtasks = []
        for title in subtask_titles:
            subtask_data = MissionCreate(
                title=title,
                type=MissionType.TASK,
                user_id=parent_mission.user_id,
                category_id=parent_mission.category_id,
                parent_project_id=mission_id,
                priority=parent_mission.priority,
                heaviness=1  # Subtasks are lighter
            )
            subtask = await self.create_mission(session, subtask_data)
            subtasks.append(subtask)
        
        return subtasks

    async def get_context_for_ai(self, session: AsyncSession, user_id: UUID) -> dict:
        """Get context for AI agent - recent missions, overdue, etc."""
        recent_missions = await self.mission_repo.get_recent_missions(session, user_id, days=7)
        overdue_missions = await self.mission_repo.get_overdue_missions(session, user_id)
        today_missions = await self.mission_repo.get_today_missions(session, user_id)
        
        # Get reward data
        reward = await self.reward_repo.get_by_user(session, user_id)
        
        return {
            "recent_missions": [MissionRead.model_validate(m) for m in recent_missions],
            "overdue_missions": [MissionRead.model_validate(m) for m in overdue_missions],
            "today_missions": [MissionRead.model_validate(m) for m in today_missions],
            "total_pending": len(await self.mission_repo.list_pending_by_user(session, user_id)),
            "reward": {
                "points": reward.points if reward else 0,
                "streak": reward.streak if reward else 0,
                "total_tasks_done": reward.total_tasks_done if reward else 0,
                "milestones_unlocked": reward.milestones_unlocked if reward else ""
            } if reward else None
        }
