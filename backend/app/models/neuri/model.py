from __future__ import annotations

from typing import TYPE_CHECKING
from uuid import UUID
import enum

from sqlalchemy import Index, ForeignKey, String, Text, Integer, Boolean, DateTime, Enum, UniqueConstraint, Float
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import Mapped, mapped_column, relationship

from app.models.base import DBModel, UUIDMixin, TimestampMixin

if TYPE_CHECKING:
    from app.models.neuri.model import Mission, Routine


class MissionType(enum.Enum):
    """Mission types enum"""
    TASK = "task"
    PROJECT = "project"
    NOTE = "note"
    REMINDER = "reminder"


class User(DBModel, UUIDMixin, TimestampMixin, kw_only=True):
    """User model for Neuri system"""

    __tablename__ = "users"

    email: Mapped[str] = mapped_column(String(255), unique=True, index=True, nullable=False)
    name: Mapped[str | None] = mapped_column(String(255), nullable=True)
    pace: Mapped[str | None] = mapped_column(String(50), nullable=True)  # "relaxed", "focused"
    preferred_work_time: Mapped[str | None] = mapped_column(String(50), nullable=True)  # "evening", "morning"
    
    # Relationships
    reward: Mapped["Reward"] = relationship(back_populates="user", cascade="all, delete-orphan", uselist=False)
    categories: Mapped[list["Category"]] = relationship(back_populates="user", cascade="all, delete-orphan")
    missions: Mapped[list["Mission"]] = relationship(back_populates="user", cascade="all, delete-orphan")
    routines: Mapped[list["Routine"]] = relationship(back_populates="user", cascade="all, delete-orphan")

    __table_args__ = (Index("ix_users_created_at", "created_at"),)


class Category(DBModel, UUIDMixin, TimestampMixin, kw_only=True):
    """Category model for organizing missions and routines"""

    __tablename__ = "categories"

    name: Mapped[str] = mapped_column(String(255), nullable=False)
    user_id: Mapped[UUID] = mapped_column(
        ForeignKey("users.id", ondelete="CASCADE"), nullable=False, index=True
    )
    
    # Relationships
    user: Mapped["User"] = relationship(back_populates="categories")
    missions: Mapped[list["Mission"]] = relationship(back_populates="category")
    routines: Mapped[list["Routine"]] = relationship(back_populates="category")

    __table_args__ = (Index("ix_categories_created_at", "created_at"),)


class Routine(DBModel, UUIDMixin, TimestampMixin, kw_only=True):
    """Routine model for scheduled tasks"""

    __tablename__ = "routines"

    user_id: Mapped[UUID] = mapped_column(
        ForeignKey("users.id", ondelete="CASCADE"), nullable=False, index=True
    )
    category_id: Mapped[UUID | None] = mapped_column(
        ForeignKey("categories.id", ondelete="SET NULL"), nullable=True, index=True
    )
    
    title: Mapped[str] = mapped_column(String(255), nullable=False)
    
    # Stored as JSON string list of objects:
    # e.g., '[{"day": "MON", "time": "17:00"}, {"day": "WED", "time": "afternoon"}]'
    schedule: Mapped[str | None] = mapped_column(Text, nullable=True)
    
    # Relationships
    user: Mapped["User"] = relationship(back_populates="routines")
    category: Mapped["Category | None"] = relationship(back_populates="routines")
    
    # One-to-Many: A routine can generate many missions
    generated_missions: Mapped[list["Mission"]] = relationship(back_populates="parent_routine")

    __table_args__ = (Index("ix_routines_created_at", "created_at"),)


class Mission(DBModel, UUIDMixin, TimestampMixin, kw_only=True):
    """Mission model for tasks, projects, notes, and reminders"""

    __tablename__ = "missions"

    title: Mapped[str] = mapped_column(String(255), nullable=False)
    type: Mapped[MissionType] = mapped_column(Enum(MissionType), nullable=False)
    
    # Foreign keys
    user_id: Mapped[UUID] = mapped_column(
        ForeignKey("users.id", ondelete="CASCADE"), nullable=False, index=True
    )
    category_id: Mapped[UUID | None] = mapped_column(
        ForeignKey("categories.id", ondelete="SET NULL"), nullable=True, index=True
    )
    
    # Parent Relationships
    # For sub-tasks
    parent_project_id: Mapped[UUID | None] = mapped_column(
        ForeignKey("missions.id", ondelete="SET NULL"), nullable=True, index=True
    )
    # For tasks generated by a routine
    parent_routine_id: Mapped[UUID | None] = mapped_column(
        ForeignKey("routines.id", ondelete="SET NULL"), nullable=True, index=True
    )
    
    # Fields for different mission types
    body: Mapped[str | None] = mapped_column(Text, nullable=True)  # For 'note' type
    
    # Dual deadline system
    true_deadline: Mapped[DateTime | None] = mapped_column(DateTime, nullable=True)  # External/real-world due date
    personal_deadline: Mapped[DateTime | None] = mapped_column(DateTime, nullable=True)  # Motivational/self-imposed checkpoint
    
    # Recurrence
    recurrence_rule: Mapped[str | None] = mapped_column(String(100), nullable=True)  # e.g., "DAILY", "WEEKLY"

    is_complete: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)
    
    # AI Context (1-10 scale)
    heaviness: Mapped[int | None] = mapped_column(Integer, nullable=True, default=5)
    priority: Mapped[int | None] = mapped_column(Integer, nullable=True, default=5)
    
    # Relationships
    user: Mapped["User"] = relationship(back_populates="missions")
    category: Mapped["Category | None"] = relationship(back_populates="missions")
    
    # Self-referential for Projects/Sub-tasks
    sub_tasks: Mapped[list["Mission"]] = relationship(
        "Mission",
        back_populates="parent_project",
        remote_side="Mission.id",
        cascade="all, delete-orphan",
        single_parent=True
    )
    parent_project: Mapped["Mission | None"] = relationship(
        "Mission",
        back_populates="sub_tasks",
        foreign_keys=[parent_project_id]
    )
    
    # Relationship to parent Routine
    parent_routine: Mapped["Routine | None"] = relationship(back_populates="generated_missions")

    __table_args__ = (Index("ix_missions_created_at", "created_at"),)


class Reward(DBModel, UUIDMixin, TimestampMixin, kw_only=True):
    """Reward system for user gamification"""

    __tablename__ = "rewards"

    user_id: Mapped[UUID] = mapped_column(
        ForeignKey("users.id", ondelete="CASCADE"), nullable=False, unique=True, index=True
    )
    
    # Core Stats
    points: Mapped[int] = mapped_column(Integer, default=0, nullable=False)
    streak: Mapped[int] = mapped_column(Integer, default=0, nullable=False)
    total_tasks_done: Mapped[int] = mapped_column(Integer, default=0, nullable=False)
    
    # Milestones
    milestones_unlocked: Mapped[str | None] = mapped_column(Text, nullable=True)
    
    # Relationships
    user: Mapped["User"] = relationship(back_populates="reward")

    __table_args__ = (Index("ix_rewards_created_at", "created_at"),)
